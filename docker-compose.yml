services:
  db:
    env_file:
      - .env
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  kafka:
    container_name: karafka_22_kafka
    image: wurstmeister/kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS:
        "benchmarks_00_01:1:1,\
         benchmarks_00_05:5:1,\
         benchmarks_01_05:5:1,\
         benchmarks_00_10:10:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: on-failure

  redis:
    command: redis-server --save 60 1 --loglevel warning
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  web: &app
    build:
      args:
        CONTAINER_GID: ${CONTAINER_GID:-1000}
        CONTAINER_UID: ${CONTAINER_UID:-1000}
        CONTAINER_USER: ${CONTAINER_USER:-rails}
      context: .
      dockerfile: Dockerfile-dev
    depends_on:
      - db
      - kafka
      - redis
    env_file:
      - .env
    ports:
      - "3000:3000"
    tmpfs:
      - /rails/tmp:mode=770,gid=${CONTAINER_GID},uid=${CONTAINER_UID}
      - /tmp:mode=770,gid=${CONTAINER_GID},uid=${CONTAINER_UID}
    volumes:
      - type: bind
        source: .
        target: /rails

  worker:
    <<: *app
    command: bundle exec karafka server
    ports:
      - "3001:3000"

  zookeeper:
    container_name: karafka_22_zookeeper
    image: wurstmeister/zookeeper
    restart: on-failure
    ports:
      - '2181:2181'
volumes:
  db_data: {}
  redis_data: {}
